package pulsar

import (
	"encoding/binary"
	"fmt"
	"log"
	"os"
	"sync"
	"testing"
	"time"
)

func checkRequest(t *testing.T, req, exp []byte) {
	if len(req) != len(exp) {
		t.Error("request encoding failed")
	}
	for i := range exp {
		if exp[i] != req[i] {
			t.Error("request frame unexpected encoding")
		}
	}
}

func createMockClient(t *testing.T) (*mockConn, *Client) {
	var c mockConn

	conn := newConn(&c, log.New(os.Stderr, "", log.Ldate), 3*time.Second)
	cl, err := NewClient("01020304", conn)
	if err != nil {
		t.Error(err)
	}
	return &c, cl
}

func TestDiscover(t *testing.T) {
	var c mockConn
	c.rBuf.Write([]byte{0xF0, 0x0F, 0x0F, 0xF0, 0x01, 0x02, 0x03, 0x4, 0x51, 0xAA})
	conn := newConn(&c, log.New(os.Stderr, "", log.Ldate), 3*time.Second)
	cl, err := Discover(conn)
	if err != nil {
		t.Error(err)
	}
	req := c.wBuf.Bytes()
	if len(req) != len(discoveryMessage) {
		t.Error("discovery message invalid encoding.")
	}
	for i := range discoveryMessage {
		if req[i] != discoveryMessage[i] {
			t.Error("discovery message don't match")
		}
	}
	addr := make([]byte, 4)
	binary.BigEndian.PutUint32(addr, cl.Address())
	c.rBuf.Reset()
	mAddr := c.rBuf.Bytes()[4:8]
	for i := range addr {
		if addr[i] != mAddr[i] {
			t.Error("discovery message decoding failed")
		}
	}
}

func TestModel(t *testing.T) {
	c, cl := createMockClient(t)
	c.rBuf.Write([]byte{0x01, 0x02, 0x03, 0x04, 0x03, 0x02, 0x9A, 0x00, 0x98, 0xD0})
	rv, err := cl.Model()
	if err != nil {
		t.Error(err)
	}

	if rv != 0x9a00 {
		t.Error("response decoding failed")
	}

	var exp = []byte{0x01, 0x02, 0x03, 0x04}
	exp = append(exp, discoveryModel...)
	exp = append(exp, 0xD1, 0x90) //crc
	req := c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSysTime(t *testing.T) {
	c, cl := createMockClient(t)
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x04, 0x10, 0x16, 0x09, 0x08, 0x00, 0x2F, 0x0A, 0x00, 0x01}
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	tm, err := cl.SysTime()
	if err != nil {
		t.Error(err)
	}

	expTm := time.Date(2022, time.September, 8, 00, 47, 10, 00, time.Local)
	if expTm != tm {
		t.Error("response decoding failed")
	}

	var exp = []byte{0x01, 0x02, 0x03, 0x04, 0x04, 0x0A, 0x00, 0x01, 0xB3, 0x06}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSetSystemTime(t *testing.T) {
	c, cl := createMockClient(t)
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01}
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	tm := time.Date(2022, time.September, 8, 00, 47, 10, 00, time.Local)
	err := cl.SetSysTime(tm)
	if err != nil {
		t.Error(err)
	}
	var exp = []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x10, 0x16, 0x09, 0x08, 0x00, 0x2F, 0x0A, 0x00, 0x01, 0x90, 0x1E}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestCurValues(t *testing.T) {
	c, cl := createMockClient(t)
	var resp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x01, 0x1A, 0x68, 0x11,
		0xCF, 0xCE, 0xF7, 0x96, 0x85, 0x40, 0xA0, 0x1A,
		0x8A, 0x43, 0x8B, 0xE0, 0x7C, 0x40, 0x00, 0x01}
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	v, err := cl.CurValues(1, 2)
	if err != nil {
		t.Error(err)
	}
	if v[0].Id != 1 || v[1].Id != 2 {
		t.Error("response decoding failed, Id field.")
	}
	if fmt.Sprintf("%.2f", v[0].Value) != "690.87" ||
		fmt.Sprintf("%.2f", v[1].Value) != "462.03" {
		t.Error("response decoding failed, Value field.")
	}
	var exp = []byte{0x01, 0x02, 0x03, 0x04, 0x01, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0x49}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSetCurValues(t *testing.T) {
	c, cl := createMockClient(t)
	var resp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x03, 0x0E, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x01}
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	err := cl.SetCurValue(1, 690.87)
	if err != nil {
		t.Error(err)
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x03, 0x16, 0x01, 0x00,
		0x00, 0x00, 0x29, 0x5C, 0x8F, 0xC2, 0xF5, 0x96,
		0x85, 0x40, 0x00, 0x01, 0x62, 0xC3}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestPulseWeight(t *testing.T) {
	c, cl := createMockClient(t)
	var resp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x07, 0x12, 0x0A, 0xD7, 0x23, 0x3C, 0x0A, 0xD7, 0x23, 0x3C, 0x00, 0x01}
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	v, err := cl.PulseWeight(1, 2)
	if err != nil {
		t.Error(err)
	}
	if v[0].Id != 1 || v[1].Id != 2 {
		t.Error("response decoding failed, Id field.")
	}
	if fmt.Sprintf("%.2f", v[0].Value) != "0.01" ||
		fmt.Sprintf("%.2f", v[1].Value) != "0.01" {
		t.Error("response decoding failed, Value field.")
	}
	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x07, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x63}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSetPulseWeight(t *testing.T) {
	c, cl := createMockClient(t)
	var resp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x08, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01}
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	err := cl.SetPulseWeight(1, 0.01)
	if err != nil {
		t.Error(err)
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x08, 0x12, 0x01, 0x00, 0x00, 0x00, 0x0A, 0xD7, 0x23, 0x3C, 0x00, 0x01, 0x61, 0x74}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestHourlyLog(t *testing.T) {
	var resp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x06, 0x78, 0x01, 0x00, 0x00, 0x00, 0x16, 0x09, 0x06, 0x0E, 0x00, 0x00,
		0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44,
		0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44, 0x96, 0x9B, 0x2C, 0x44, 0xDD, 0x9C, 0x2C, 0x44,
		0xB4, 0xA0, 0x2C, 0x44, 0x8B, 0xA4, 0x2C, 0x44, 0x2F, 0xA5, 0x2C, 0x44, 0x2F, 0xA5, 0x2C, 0x44,
		0x2F, 0xA5, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44,
		0x77, 0xA6, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44, 0xBE, 0xA7, 0x2C, 0x44, 0x06, 0xA9, 0x2C, 0x44,
		0xAA, 0xA9, 0x2C, 0x44, 0xAA, 0xA9, 0x2C, 0x44, 0xAA, 0xA9, 0x2C, 0x44, 0x4E, 0xAA, 0x2C, 0x44,
		0x6F, 0xF2, 0xE6, 0x43, 0x00, 0x01,
	}
	from := time.Date(2022, time.September, 6, 14, 05, 06, 07, time.Local)
	to := time.Date(2022, time.September, 7, 14, 00, 00, 00, time.Local)

	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))

	l, err := cl.HourlyLog(1, from, to)
	if err != nil {
		t.Error(err)
	}
	if l.Type != Hourly {
		t.Error("response decoding failed, Type field.")
	}
	if l.Id != 1 {
		t.Error("response decoding failed, Id field.")
	}
	if l.Start != time.Date(from.Year(), from.Month(), from.Day(), from.Hour(), 00, 00, 00, time.Local) {
		t.Error("response decoding failed, Start field.")
	}
	if len(l.Values) != 25 {
		t.Error("response decoding failed, Values field.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x06, 0x1C, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x16, 0x09, 0x06, 0x0E, 0x00, 0x00, 0x16, 0x09, 0x07, 0x0E, 0x00, 0x00,
		0x00, 0x01, 0xA4, 0xFE}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestDailyLog(t *testing.T) {
	var resp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x06, 0x78, 0x01, 0x00, 0x00, 0x00, 0x16, 0x09, 0x06, 0x00, 0x00, 0x00,
		0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44,
		0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44, 0x96, 0x9B, 0x2C, 0x44, 0xDD, 0x9C, 0x2C, 0x44,
		0xB4, 0xA0, 0x2C, 0x44, 0x8B, 0xA4, 0x2C, 0x44, 0x2F, 0xA5, 0x2C, 0x44, 0x2F, 0xA5, 0x2C, 0x44,
		0x2F, 0xA5, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44,
		0x77, 0xA6, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44, 0xBE, 0xA7, 0x2C, 0x44, 0x06, 0xA9, 0x2C, 0x44,
		0xAA, 0xA9, 0x2C, 0x44, 0xAA, 0xA9, 0x2C, 0x44, 0xAA, 0xA9, 0x2C, 0x44, 0x4E, 0xAA, 0x2C, 0x44,
		0x6F, 0xF2, 0xE6, 0x43, 0x00, 0x01,
	}

	from := time.Date(2022, time.September, 6, 14, 05, 06, 07, time.Local)
	to := time.Date(2022, time.September, 7, 14, 00, 00, 00, time.Local)

	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))

	l, err := cl.DailyLog(1, from, to)
	if err != nil {
		t.Error(err)
	}
	if l.Type != Daily {
		t.Error("response decoding failed, Type field.")
	}
	if l.Id != 1 {
		t.Error("response decoding failed, Id field.")
	}
	if l.Start != time.Date(from.Year(), from.Month(), from.Day(), 00, 00, 00, 00, time.Local) {
		t.Error("response decoding failed, Start field.")
	}
	if len(l.Values) != 25 {
		t.Error("response decoding failed, Values field.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x06, 0x1C, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
		0x16, 0x09, 0x06, 0x00, 0x00, 0x00, 0x16, 0x09, 0x07, 0x00, 0x00, 0x00,
		0x00, 0x01, 0xB9, 0x26}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestMonthlyLog2(t *testing.T) {
	var resp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x06, 0x78, 0x01, 0x00, 0x00, 0x00, 0x16, 0x03, 0x01, 0x00, 0x00, 0x00,
		0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44,
		0xF2, 0x9A, 0x2C, 0x44, 0xF2, 0x9A, 0x2C, 0x44, 0x96, 0x9B, 0x2C, 0x44, 0xDD, 0x9C, 0x2C, 0x44,
		0xB4, 0xA0, 0x2C, 0x44, 0x8B, 0xA4, 0x2C, 0x44, 0x2F, 0xA5, 0x2C, 0x44, 0x2F, 0xA5, 0x2C, 0x44,
		0x2F, 0xA5, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44,
		0x77, 0xA6, 0x2C, 0x44, 0x77, 0xA6, 0x2C, 0x44, 0xBE, 0xA7, 0x2C, 0x44, 0x06, 0xA9, 0x2C, 0x44,
		0xAA, 0xA9, 0x2C, 0x44, 0xAA, 0xA9, 0x2C, 0x44, 0xAA, 0xA9, 0x2C, 0x44, 0x4E, 0xAA, 0x2C, 0x44,
		0x6F, 0xF2, 0xE6, 0x43, 0x00, 0x01,
	}
	from := time.Date(2022, time.March, 6, 14, 05, 06, 07, time.Local)
	to := time.Date(2022, time.September, 7, 14, 00, 00, 00, time.Local)

	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))

	l, err := cl.MonthlyLog(1, from, to)
	if err != nil {
		t.Error(err)
	}
	if l.Type != Monthly {
		t.Error("response decoding failed, Type field.")
	}
	if l.Id != 1 {
		t.Error("response decoding failed, Id field.")
	}
	if l.Start != time.Date(from.Year(), from.Month(), 1, 0, 00, 00, 00, time.Local) {
		t.Error("response decoding failed, Start field.")
	}
	if len(l.Values) != 25 {
		t.Error("response decoding failed, Values field.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x06, 0x1C, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00,
		0x16, 0x03, 0x01, 0x00, 0x00, 0x00, 0x16, 0x0A, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x01, 0xA6, 0x11}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestLineTest(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x09, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	l, err := cl.LineTest(1, 2)
	if err != nil {
		t.Error(err)
	}
	if l != 0 {
		t.Error("response decoding failed.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x09, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBE, 0xEF}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestInputTest(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x19, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	l, err := cl.InputTest(1, 2)
	if err != nil {
		t.Error(err)
	}
	if l != 0 {
		t.Error("response decoding failed.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x19, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0xE3}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestDayLightSaving(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0A, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	l, err := cl.DayLightSaving()
	if err != nil {
		t.Error(err)
	}
	if l != false {
		t.Error("response decoding failed.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0A, 0x0C, 0x01, 0x00, 0x00, 0x01, 0xED, 0xE0}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSetDayLightSaving(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	err := cl.SetDayLightSaving(true)
	if err != nil {
		t.Error(err)
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0B, 0x14, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x92, 0x93}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestPulseLength(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0A, 0x12, 0x80, 0xF3, 0xC7, 0x42,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	l, err := cl.PulseLength()
	if err != nil {
		t.Error(err)
	}

	if fmt.Sprintf("%.2f", l) != "99.98" {
		t.Error("response decoding failed.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0A, 0x0C, 0x03, 0x00, 0x00, 0x01, 0xEC, 0x58}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSetPulseLength(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	err := cl.SetPulseLength(99.98)
	if err != nil {
		t.Error(err)
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0B, 0x14, 0x03, 0x00, 0x00, 0x00, 0x00, 0x60, 0xB8, 0xFE, 0x58, 0x40, 0x00, 0x01, 0x7A, 0x8F}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestPauseLength(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0A, 0x12, 0x80, 0xF3, 0xC7, 0x42,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	l, err := cl.PauseLength()
	if err != nil {
		t.Error(err)
	}

	if fmt.Sprintf("%.2f", l) != "99.98" {
		t.Error("response decoding failed.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0A, 0x0C, 0x04, 0x00, 0x00, 0x01, 0xED, 0x2C}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSetPauseLength(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	err := cl.SetPauseLength(99.98)
	if err != nil {
		t.Error(err)
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0B, 0x14, 0x04, 0x00, 0x00, 0x00, 0x00, 0x60, 0xB8, 0xFE, 0x58, 0x40, 0x00, 0x01, 0x8F, 0x44}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestFirmwareVersion(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0A, 0x12, 0x66, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	l, err := cl.FirmwareVersion()
	if err != nil {
		t.Error(err)
	}

	if l != 102 {
		t.Error("response decoding failed.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0A, 0x0C, 0x05, 0x00, 0x00, 0x01, 0xEC, 0xD0}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestDiagnostics(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0A, 0x12, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	l, err := cl.DiagnosticsFlags()
	if err != nil {
		t.Error(err)
	}

	if l != 0 {
		t.Error("response decoding failed.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0A, 0x0C, 0x06, 0x00, 0x00, 0x01, 0xEC, 0x94}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSerialSpeed(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0A, 0x12, 0x80, 0x25, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	l, err := cl.SerialSpeed()
	if err != nil {
		t.Error(err)
	}

	if l != 9600 {
		t.Error("response decoding failed.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0A, 0x0C, 0x08, 0x00, 0x00, 0x01, 0xEE, 0x7C}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSetSerialSpeed(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	err := cl.SetSerialSpeed(9600)
	if err != nil {
		t.Error(err)
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0B, 0x14, 0x08, 0x00, 0x80, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7E, 0x33}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSerialConfig(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0A, 0x12, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	l, err := cl.SerialConfig()
	if err != nil {
		t.Error(err)
	}

	if l != Serial8N1 {
		t.Error("response decoding failed.")
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0A, 0x0C, 0x09, 0x00, 0x00, 0x01, 0xEF, 0x80}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestSetSerialConfig(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x01}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	c.rBuf.Write(generateCRC(resp))
	err := cl.SetSerialConfig(Serial8E2)
	if err != nil {
		t.Error(err)
	}

	var exp = []byte{
		0x01, 0x02, 0x03, 0x04, 0x0B, 0x14, 0x09, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xA6, 0x5F}
	var req = c.wBuf.Bytes()
	checkRequest(t, req, exp)
}

func TestErrorResponse(t *testing.T) {
	var resp = []byte{0x01, 0x02, 0x03, 0x04, 0x00, 0x0B, 0x02, 0x00, 0x02, 0x96, 0x18}
	c, cl := createMockClient(t)
	c.rBuf.Write(resp)
	_, err := cl.SerialConfig()
	if err == nil {
		t.Error("response decoding failed.")
	}
	e2, ok := err.(*ProtocolError)
	if !ok {
		t.Error("wrong type of error")
	}
	if e2.Code() != InvalidBitMask {
		t.Error("response decoding failed. Wrong error code.")
	}
}

func TestMessageIds(t *testing.T) {
	_, cl := createMockClient(t)
	var wg sync.WaitGroup
	cnt := 100
	wg.Add(cnt)
	for i := 0; i < cnt; i++ {
		go func() {
			cl.nextId()
			wg.Done()
		}()
	}
	wg.Wait()
	if cl.nextId() != 101 {
		t.Error("id generator fail.")
	}
}

func generateCRC(data []byte) []byte {
	var res crc
	res.reset()
	res.update(data)
	rv := make([]byte, 2)
	binary.LittleEndian.PutUint16(rv, uint16(res))
	return rv
}
